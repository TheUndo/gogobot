datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x"]
}

model Anime {
  id Int @id @default(autoincrement())

  slug          String              @unique
  nameDisplay   String
  names         AnimeName[]
  cover         String
  description   String
  season        String?
  year          Int
  type          String
  status        String
  language      String
  genres        AnimeGenre[]
  episodes      AnimeEpisode[]
  subscriptions AnimeSubscription[]
  createdAt     DateTime            @default(now())
}

model AnimeEpisode {
  id String @id @default(cuid())

  anime   Anime  @relation(fields: [animeId], references: [id])
  animeId Int
  episode Float
  slug    String @unique

  createdAt DateTime @default(now())

  @@unique([animeId, episode])
}

model AnimeGenre {
  id    String  @id @default(cuid())
  anime Anime[]
  genre String
  slug  String  @unique
}

model AnimeName {
  id      String @id @default(cuid())
  anime   Anime  @relation(fields: [animeId], references: [id])
  animeId Int
  name    String
}

model AnimeSubscription {
  id            String   @id @default(cuid())
  anime         Anime    @relation(fields: [animeId], references: [id])
  animeId       Int
  userDiscordId String
  createdAt     DateTime @default(now())

  @@unique([animeId, userDiscordId])
}

model News {
  id        String   @id @default(cuid())
  title     String
  slug      String   @unique
  cover     String
  type      String
  createdAt DateTime @default(now())
}

model Wallet {
  id            String   @id @default(cuid())
  userDiscordId String
  guildId       String
  balance       BigInt   @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  inventory ShopItem[]

  lastRobbed  DateTime?
  immuneUntil DateTime?

  @@unique([userDiscordId, guildId])
}

model ShopItem {
  id         String @id @default(cuid())
  type       String
  itemId     String
  durability Int?

  wallet   Wallet @relation(fields: [walletId], references: [id])
  walletId String

  purchasedAt DateTime @default(now())

  @@index([itemId, walletId])
}

model Bank {
  id            String   @id @default(cuid())
  userDiscordId String
  guildId       String
  balance       BigInt   @default(1000)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@unique([userDiscordId, guildId])
}

model Work {
  id             String   @id @default(cuid())
  type           String
  createdAt      DateTime @default(now())
  userDiscordId  String
  guildDiscordId String
  streak         Int      @default(0)
}

model Clan {
  id   String @id @default(cuid())
  name String

  // Used to prevent name conflicts
  slug String

  discordGuildId String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  members        ClanMember[]

  settingsJoin         String
  settingsDescription  String?
  settingsColor        Int?
  settingsAbbreviation String?
  settingsBanner       String?
  settingsLogo         String?
  invitations          ClanInvitation[]
  banishments          ClanBanishment[]
  statistics           ClanStatistics[]
  level                Int              @default(1)

  lastNameChange DateTime @default(now())

  roleId    String?
  channelId String?

  treasuryBalance BigInt             @default(0)
  announcements   ClanAnnouncement[]

  @@unique([slug, discordGuildId])
}

model ClanlessUser {
  id            String   @id @default(cuid())
  userDiscordId String
  guildId       String
  createdAt     DateTime @default(now())

  @@unique([userDiscordId, guildId])
}

model ClanStatistics {
  id String @id @default(cuid())

  clan      Clan     @relation(fields: [clanId], references: [id])
  wealth    BigInt
  guildId   String
  clanId    String
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}

model ClanMember {
  id               String    @id @default(cuid())
  joinedAt         DateTime  @default(now())
  clan             Clan      @relation(fields: [clanId], references: [id])
  clanId           String
  guildId          String
  discordUserId    String
  role             String
  contributed      BigInt    @default(0)
  lastContribution DateTime?

  @@unique([guildId, discordUserId])
  @@unique([clanId, discordUserId])
}

model ClanInvitation {
  id String @id @default(cuid())

  clan               Clan     @relation(fields: [clanId], references: [id])
  clanId             String
  userDiscordId      String
  createdAt          DateTime @default(now())
  invitedByDiscordId String
}

model ClanBanishment {
  id String @id @default(cuid())

  clan                Clan     @relation(fields: [clanId], references: [id])
  clanId              String
  userDiscordId       String
  createdAt           DateTime @default(now())
  banishedByDiscordId String
}

model Interaction {
  id            String    @id @default(cuid())
  userDiscordId String
  guildId       String?
  channelId     String?
  type          String
  payload       String?
  consumedAt    DateTime?
  createdAt     DateTime  @default(now())
}

model GuildConfig {
  id String @id @default(cuid())

  economyChannelId String?
}

model ClanAnnouncement {
  id String @id @default(cuid())

  clan            Clan     @relation(fields: [clanId], references: [id])
  message         String
  authorDiscordId String
  createdAt       DateTime @default(now())
  clanId          String
}

model Transaction {
  id            String   @id @default(cuid())
  userDiscordId String
  guildId       String
  clanId        String?
  amount        BigInt
  type          String
  createdAt     DateTime @default(now())
}

model Connect4Game {
  id String @id @default(cuid())

  guildId         String
  channelId       String
  challenger      String
  opponent        String
  board           String
  gameState       String
  challengerColor String
  moveTime        Int
  wagerAmount     BigInt?

  lastMessageId String
  lastMoveAt    DateTime
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  endedAt       DateTime?

  @@index([endedAt])
}

model Connect4GameInvitation {
  id String @id @default(cuid())

  challenger      String
  opponent        String?
  challengerColor String
  moveTime        Int
  guildId         String
  channelId       String
  wagerAmount     BigInt?
  createdAt       DateTime @default(now())
  voided          Boolean  @default(false)
  expiresAt       DateTime

  @@index([expiresAt, voided])
}

model DiscordCacheUserNameCache {
  id            String   @id @default(cuid())
  userDiscordId String
  guildId       String
  nickname      String?
  username      String
  createdAt     DateTime @default(now())

  @@index([userDiscordId, guildId])
}

model Pet {
  id           String @id @default(cuid())
  name         String
  level        Int    @default(1)
  happiness    Int
  hunger       Int
  color        Int
  type         String
  // This is derived from the pet's health
  // Used only for faster queries
  derivedState String

  // When did the owner last check in on the pet?
  ownerCheckedInAt DateTime @default(now())

  userId    String
  guildId   String
  createdAt DateTime @default(now())

  @@unique([userId, guildId])
  @@index([derivedState])
}
